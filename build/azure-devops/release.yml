trigger: 
- main
pr: none
    
name: 1.0$(Rev:.r)

variables:
- group: azdevops-lambda-hook-globals
- group: azdevops-lambda-hook-prod

stages:
- stage: BuildAndPublish
  displayName: Build and Publish
  jobs:
  - job: BuildLambdas
    displayName: Build Azure DevOps Lambda
    pool:
      vmImage: ubuntu-18.04

    container: node:12-buster

    steps:
    - template: templates/build-and-publish-lambda.yml
      parameters:
        lambdaName: azdev-adapter-webhook

- stage: AWSCFValidate
  displayName: "Validate"
  dependsOn: []
  jobs:
  - job: ValidateTemplates
    displayName: Validate Templates
    pool:
      vmImage: windows-2019

    steps:
    - template: templates/validate-cf-templates.yml

- stage: AWSCFSeedLambdas
  displayName: "Seed Lambdas"
  dependsOn: ['BuildAndPublish', 'AWSCFValidate']
  jobs:
  - job: SeedLambdas
    displayName: Seed Lambdas
    pool:
      vmImage: windows-2019

    steps:
    - task: DownloadPipelineArtifact@2
      displayName: "Download azdev-adapter-webhook"
      inputs:
        source: current
        artifact: azdev-adapter-webhook
        path: $(Pipeline.Workspace)/Input/azdev-adapter-webhook

    # We could be smart about this and only copy the Lambda zip if it does not exist, but...
    # AWS will only update the Lambda code when update-function-code is called. So this is harmless without smarts. And we need the Zip around to create the Stack for the first time.
    - task: AmazonWebServices.aws-vsts-tools.AWSCLI.AWSCLI@1
      displayName: 'cp azdev-adapter-webhook'
      inputs:
        awsCredentials: 'cloudformation.ap-southeast-2.amazonaws.com'      
        regionName: 'ap-southeast-2'
        awsCommand: s3
        awsSubCommand: cp
        awsArguments: $(Pipeline.Workspace)/Input/azdev-adapter-webhook/azdev-adapter-webhook.zip s3://$(TurkanaS3BucketNameParameter)/private/$(TurkanaEnvironmentParameter)/azdev-adapter-webhook/azdev-adapter-webhook.zip
        failOnStandardError: true        

# TODO: Use Environment and Deployment 
- stage: AWSCFStacksDeploy
  displayName: "Deploy"
  dependsOn: ['AWSCFSeedLambdas']
  jobs:
  - job: DeployStacks
    displayName: Deploy Production
    pool:
      vmImage: windows-2019

    steps:
    - task: AmazonWebServices.aws-vsts-tools.AWSCLI.AWSCLI@1
      displayName: 'globals-deploy-start'
      inputs:
        awsCredentials: 'cloudformation.ap-southeast-2.amazonaws.com'      
        regionName: 'ap-southeast-2'
        awsCommand: cloudformation
        awsSubCommand: deploy
        awsArguments: --stack-name turkana-globals --no-fail-on-empty-changeset --template-file ./infra/globals/globals.yaml --capabilities CAPABILITY_IAM --parameter-overrides TurkanaS3BucketNameParameter=$(TurkanaS3BucketNameParameter)
        failOnStandardError: true

    - task: AmazonWebServices.aws-vsts-tools.AWSCLI.AWSCLI@1
      displayName: 'platform-deploy-start'
      inputs:
        awsCredentials: 'cloudformation.ap-southeast-2.amazonaws.com'      
        regionName: 'ap-southeast-2'
        awsCommand: cloudformation
        awsSubCommand: deploy
        awsArguments: --stack-name turkana-prod-platform --no-fail-on-empty-changeset --template-file ./infra/platform/foundation.yaml --capabilities CAPABILITY_IAM --parameter-overrides TurkanaDomainNameParameter=$(TurkanaDomainNameParameter) TurkanaEnableApiGatewayLogging=$(TurkanaEnableApiGatewayLogging) TurkanaEnvironmentParameter=$(TurkanaEnvironmentParameter) TurkanaHostedZoneIdParameter=$(TurkanaHostedZoneIdParameter) TurkanaRegionalCertificateArnParameter=$(TurkanaRegionalCertificateArnParameter)
        failOnStandardError: true

    - task: AmazonWebServices.aws-vsts-tools.AWSCLI.AWSCLI@1
      displayName: 'app-deploy-start'
      inputs:
        awsCredentials: 'cloudformation.ap-southeast-2.amazonaws.com'      
        regionName: 'ap-southeast-2'
        awsCommand: cloudformation
        awsSubCommand: deploy
        awsArguments: --stack-name turkana-prod-application --no-fail-on-empty-changeset --template-file ./infra/application/application.yaml --capabilities CAPABILITY_IAM --parameter-overrides TurkanaEnvironmentParameter=$(TurkanaEnvironmentParameter) TurkanaAzDevAdapterWebhookApiKey=$(TurkanaAzDevAdapterWebhookApiKey)
        failOnStandardError: true        

- stage: AWSCFLambdasDeploy
  displayName: "Deploy Lambdas"
  dependsOn: ['AWSCFStacksDeploy']
  jobs:
  - job: DeployLambdas
    displayName: Deploy Lambdas
    pool:
      vmImage: windows-2019

    steps:
    - task: DownloadPipelineArtifact@2
      displayName: "Download azdev-adapter-webhook"
      inputs:
        source: current
        artifact: azdev-adapter-webhook
        path: $(Pipeline.Workspace)/Input/azdev-adapter-webhook

    - task: AmazonWebServices.aws-vsts-tools.AWSCLI.AWSCLI@1
      displayName: 'cp azdev-adapter-webhook'
      inputs:
        awsCredentials: 'cloudformation.ap-southeast-2.amazonaws.com'      
        regionName: 'ap-southeast-2'
        awsCommand: lambda
        awsSubCommand: update-function-code
        awsArguments: --function-name turkana-$(TurkanaEnvironmentParameter)-prod-azdev-adapter-webhook --zip-file fileb://$(Pipeline.Workspace)/Input/azdev-adapter-webhook/azdev-adapter-webhook.zip
        failOnStandardError: true
